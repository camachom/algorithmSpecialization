exit
graph_copy.nodes
graph_copy.nodes.length
continue
graph_copy.nodes.length
graph_copy.nodes
graph_copy
graph
exit
k.edges.include?166
a.edges.include?97
k = graph.nodes.find {|node| node.number == 97}
k = graph.nodes.find {|node| node.number == 166}
a = graph.nodes.find {|node| node.number == 166}
b = graph.nodes.find {|node| node.number == 97}
a = graph.nodes.find {|node| node.number == 166}
a = graph_copy.nodes.find {|node| node.number == 166}
exit
node_b.edges.length
node_b.edges
node_b.number
node
graph_copy.nodes.length
exit
graph.nodes.map(&:number).sort
graph.nodes
graph
exit
node.edges
node_b.number
node_b
node
exit
num
removed
exit
graph_copy.nodes.length
num
node_b.edges
node_b
edge_node
exit
c
node_a.number
node_b.number
node_a.edges
exit
s
n
display edge_node.edges
n
display node_b.number
display node_a.edges
c
node_a.edges
node_b.number
edge_node.edges
exit
a
a.edges.delete_if {|num| num == 75}
a.edges
a = graph_copy.nodes.find {|node| node.number == 5}
n
display edge_node
n
display node_b.number
display node_a.number
exit
s
n
exit
a = graph_copy.nodes.find {|node| node.number == 123}
n
edge_node
n
display node_b.number
display node_a.number
var local
exit
graph_copy.nodes.length
graph_copy.nodes.find {|node| node.number == 60}
random_idx_2
node_a
    end
      node.number == node_a.edges.to_a[random_idx_2]
graph_copy.nodes.find do |node|
random_idx_2
node_a
node_b
exit
node_a.edges
n
node_a.number
node_a.edges
exit
graph_copy.nodes.length
graph_copy.nodes
graph_copy
exit
graph_copy.nodes.find {|node| node.number == 83}
graph_copy.nodes
node_a.edges.to_a[29]
node_a.edges
random_idx_2
random_idx2
node_b
node-B
n
c
display node_a
display graph_copy.nodes
c
display node_a
display node_A
exit
c
n
n~
graph_copy.nodes.find {|node| node.number == 22}
graph_copy.nodes.find {|node| node.number == 57}
node_b
node_a
node-a
var local
n
node_b
node_a
node_A
var local
n
exit
graph.nodes.find {|node| node.number == 139}
graph_copy.nodes.
n
exit
ecit
graph.nodes.find {|node| node.number == 139}
graph.nodes.find {|node| node == 58}
graph.nodes.find {|node| node == 139}
n
node_b.edges.include? 58
node_a.edges.include?139
node_a.edges.indlude?139
node_b
node_a
exit
rand(node_a.edges.length)
random_idx_2
node_a.edges.length
node_a.edges
exit
graph.nodes.first
graph
copy.nodes.first
copy.nodes.first.edges.add(10000000000)
copy.nodes.first
copy
copy = Marshal::load(Marshal.dump(graph))
graph.nodes.first
g_clone.nodes.first
g_clone.nodes.first.edges = Set.new
g_clone.nodes.first
g_clone = graph.clone
g
g = graph
graph
exit
graph
exit
current_node
exit
current_node.edges.first.number
current_node.edges.first
current_node.edges
current_node.number
current_node
n
s
graph_node_hash
n
s
current_node
current_nod3e
n
int_array
n
int_array
exit
int_array
exit
continue
line.split("\t")
line
